CREATE DATABASE DENTAL_CLINIC;

CREATE TABLE CLINIC(
CLINIC_ID INTEGER NOT NULL,
CLINIC_NAME VARCHAR(50) NOT NULL,
CLINIC_STATE VARCHAR(20) NOT NULL,
CLINIC_CITY VARCHAR(20) NOT NULL,
CLINIC_STREET VARCHAR(20) NOT NULL,
CLINIC_AREA_CODE INTEGER NOT NULL,
CLINIC_PHONE_NUMBER INTEGER NOT NULL,
PRIMARY KEY(CLINIC_ID)
); --End of table clinic

CREATE TABLE PRODUCT(
PRODUCT_ID INTEGER NOT NULL,
PRODUCT_NAME VARCHAR(50) NOT NULL,
PRODUCT_QOH INTEGER NOT NULL,
PRODUCT_MIN INTEGER NOT NULL,
PRODUCT_REORDER INTEGER NOT NULL,
CLINIC_ID INTEGER NOT NULL,
PRIMARY KEY(PRODUCT_ID),
FOREIGN KEY (CLINIC_ID) REFERENCES CLINIC
);

CREATE TABLE EMPLOYEE(
EMPLOYEE_ID INTEGER IDENTITY(1,1),
EMPLOYEE_F_NAME VARCHAR(50) NOT NULL,
EMPLOYEE_L_NAME VARCHAR (50) NOT NULL,
EMPLOYEE_DOB DATE NOT NULL,
EMPLOYEE_STATE VARCHAR(20) NOT NULL,
EMPOYEE_CITY VARCHAR(20) NOT NULL,
EMPLOYEE_STREET VARCHAR(20) NOT NULL,
EMPLOYEE_AREA_CODE INTEGER NOT NULL,
EMPLOYEE_PHONE_NUMBER INTEGER NOT NULL,
CLINIC_ID INTEGER NOT NULL,
PRIMARY KEY(EMPLOYEE_ID),
FOREIGN KEY(CLINIC_ID) REFERENCES CLINIC
); --End of table employee

CREATE TABLE LOGIN_EMPLOYEE(
EMPLOYEE_USERNAME VARCHAR(50) NOT NULL,
EMPLOYEE_ID INTEGER NOT NULL,
EMPLOYEE_PASSWORD VARCHAR(30) NOT NULL,
EMPLOYEE_ROLE VARCHAR(20) NOT NULL,
PRIMARY KEY(EMPLOYEE_USERNAME, EMPLOYEE_ID),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE
ON DELETE CASCADE
); --End of table login

CREATE TABLE DENTIST(
DENTIST_ID INTEGER IDENTITY(1,1),
DENTIST_ROLE VARCHAR NOT NULL,
EMPLOYEE_ID INTEGER ,
PRIMARY KEY(DENTIST_ID),
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE
);--End of table dentist

CREATE TABLE PATIENT(
PATIENT_PERSONAL_NUMBER INTEGER NOT NULL,
PATIENT_FIRST_NAME VARCHAR(50),
PATIENT_LAST_NAME VARCHAR(50),
PATIENT_STATE VARCHAR(20) NOT NULL,
PATIENT_CITY VARCHAR(20) NOT NULL,
PATIENT_STREET VARCHAR(20) NOT NULL,
PATIENT_AREA_CODE INTEGER NOT NULL,
PATIENT_PHONE_NUMBER INTEGER NOT NULL,
PATIENT_EMAIL VARCHAR(50), 
PRIMARY KEY (PATIENT_PERSONAL_NUMBER)
);--End of table patient

CREATE TABLE APPOINTMENT(
APPOINTMENT_ID INTEGER IDENTITY(1,1),
APPOINTMENT_TIME DATE NOT NULL,
DENTIST_ID INTEGER NOT NULL,
PATIENT_PERSONAL_NUMBER INTEGER NOT NULL,
PRIMARY KEY(APPOINTMENT_ID),
FOREIGN KEY(DENTIST_ID) REFERENCES DENTIST,
FOREIGN KEY(PATIENT_PERSONAL_NUMBER) REFERENCES PATIENT
);--End of table appointment

CREATE TABLE TREATMENT(
TREATMENT_ID INTEGER IDENTITY(1,1),
TREATMENT_DESCRIPTION VARCHAR(100) NOT NULL,
TREATMENT_COST INTEGER NOT NULL,
PRIMARY KEY(TREATMENT_ID)
); --End of table treatment

CREATE TABLE PATIENT_TREATMENT(
PATIENT_PERSONAL_NUMBER INTEGER NOT NULL,
TREATMENT_ID INTEGER NOT NULL,
PRIMARY KEY(PATIENT_PERSONAL_NUMBER, TREATMENT_ID),
FOREIGN KEY (PATIENT_PERSONAL_NUMBER) REFERENCES PATIENT,
FOREIGN KEY(TREATMENT_ID) REFERENCES TREATMENT
ON DELETE CASCADE
); --End of table patient_treatment

CREATE TABLE PRESCRIPTION(
PRESCRIPTION_ID INTEGER IDENTITY(1,1),
TREATMENT_ID INTEGER,
PRESCRIPTION_INFO VARCHAR(200),
PRIMARY KEY(PRESCRIPTION_ID, TREATMENT_ID),
FOREIGN KEY (TREATMENT_ID) REFERENCES TREATMENT
ON DELETE CASCADE
);

CREATE TABLE INVOICE(
INVOICE_ID INTEGER IDENTITY(1,1),
INVOICE_DATE DATE NOT NULL,
PRIMARY KEY(INVOICE_ID) 
);

CREATE TABLE INVOICE_TREATMENT(
INVOICE_ID INTEGER NOT NULL,
TREATMENT_ID INTEGER NOT NULL,
PRIMARY KEY(INVOICE_ID, TREATMENT_ID),
FOREIGN KEY(INVOICE_ID) REFERENCES INVOICE,
FOREIGN KEY(TREATMENT_ID) REFERENCES TREATMENT
ON DELETE CASCADE
);

